package io.github.aapplet.wechat.exception;

/**
 * <p>
 * `WeChatHttpException`类用于表示在微信相关业务操作中，涉及到HTTP通信时出现的异常情况。
 * 它继承自`WeChatException`，这表明它是微信业务异常体系下针对HTTP通信这一特定环节出现问题而专门定义的异常类型，
 * 继承关系使其能够沿用`WeChatException`所提供的异常处理机制以及在整个项目异常层级结构中的定位，便于统一管理和分类处理微信业务中的各类异常。
 * </p>
 * <p>
 * 在微信开发的诸多场景中，例如向微信服务器发送请求（如支付请求、获取用户信息请求等）或者接收微信服务器响应时，
 * 只要涉及到HTTP协议相关的操作出现错误，像网络连接问题（如网络超时、网络中断等）、HTTP状态码返回异常（如 404 未找到、500 服务器内部错误等）、
 * 数据传输过程中的错误（如请求或响应数据丢失、损坏等情况），都可以通过抛出`WeChatHttpException`来向上层代码传达HTTP通信层面出现的异常信息，
 * 方便后续根据具体的异常原因进行相应的处理，比如重新发起请求、提示用户检查网络或者向服务器反馈问题等操作。
 * </p>
 */
public class WeChatHttpException extends WeChatException {

    /**
     * <p>
     * 此构造方法用于创建 `WeChatHttpException` 实例，该实例仅通过传入的异常消息字符串来描述微信相关业务操作中涉及HTTP通信时出现的异常情况。
     * `WeChatHttpException` 类主要用于表示在微信相关业务场景下，当与微信服务器进行HTTP交互（如发送请求、接收响应等操作）过程中产生的各类异常。
     * </p>
     * <p>
     * 当开发人员明确知晓在HTTP通信环节出现的具体异常情况，并且可以用一个简洁明了的消息字符串准确描述该异常时，便可使用这个构造方法。
     * 它接收一个 `message` 参数，此参数为字符串类型，用于从业务角度传达HTTP异常的详细信息，方便调用者知晓是在与微信服务器的HTTP交互过程中哪方面出现了问题。
     * </p>
     * <p>
     * 例如，在向微信支付服务器发送支付请求时，若发现请求的URL格式不符合微信要求，开发人员可以构建如“向微信支付服务器发送请求时，URL格式错误，请检查”这样的消息，
     * 然后将该消息作为 `message` 参数传入此构造方法，创建出 `WeChatHttpException` 实例并抛出，以此向上层代码传达这个HTTP通信层面的异常情况，
     * 便于后续调用者根据具体的异常消息采取相应的处理措施，比如提示用户检查网络设置、修正请求参数等操作。
     * </p>
     * <p>
     * 与另一个带有 `Throwable` 类型 `cause` 参数的构造方法不同，此构造方法适用于那些无需关联底层具体引发异常的根源异常（`cause`），仅通过业务描述性消息就能完整传达HTTP异常情况的场景。
     * </p>
     *
     * @param message Exception message，是一个用于详细描述HTTP异常情况的字符串，
     *                它会清晰地告知调用者在微信相关业务的HTTP通信操作中具体出现了何种不符合预期的情况，
     *                例如是请求参数问题、URL相关问题还是其他HTTP通信环节的错误，方便调用者知晓并采取针对性的处理操作。
     */
    public WeChatHttpException(String message) {
        super(message);
    }

    /**
     * <p>
     * 这是`WeChatHttpException`类的构造方法，用于创建一个包含详细异常消息以及导致该异常的根源异常的实例。
     * 它接收两个参数：一个是表示异常消息的字符串 `message`，另一个是表示引发该HTTP异常的根源异常的 `cause`（类型为 `Throwable`）。
     * </p>
     * <p>
     * 在实际的微信业务与HTTP通信的场景中，往往当前的HTTP异常是由一些底层的技术问题所引发的。例如，当向微信服务器发送请求时，
     * 若因为网络不稳定导致请求超时，底层的网络库可能会抛出 `SocketTimeoutException`，这个底层的网络超时异常就是导致当前HTTP通信异常的根源，
     * 此时开发人员可以根据业务层面构建相应的异常消息（比如“向微信服务器发送请求超时，请检查网络连接”），并将这个消息和底层的 `SocketTimeoutException` 异常对象
     * 通过这个构造方法传入，创建出`WeChatHttpException`实例并抛出。同样，如果是接收到微信服务器返回的异常HTTP状态码，并且在处理响应数据时又出现了数据解析错误等情况，
     * 可以将业务层面描述该HTTP通信异常的消息以及对应的底层数据解析等异常作为参数传入此构造方法来创建异常实例抛出。
     * </p>
     * <p>
     * 这样，上层代码在捕获到`WeChatHttpException`后，一方面能够通过获取异常消息了解到HTTP通信在业务层面出现的问题，
     * 另一方面还可以通过 `getCause()` 方法获取到根源异常，进而深入分析是哪个底层环节（如网络、数据解析等）出了问题，有助于更全面、准确地排查和解决HTTP通信异常情况。
     * </p>
     *
     * @param message Exception message，是从微信业务角度出发，对当前HTTP通信出现异常的情况进行描述的字符串，
     *                用于告知调用者在与微信服务器进行HTTP交互过程中具体出现了何种不符合预期的情况，方便后续进行针对性处理。
     * @param cause   Throwable类型的参数，表示导致当前 `WeChatHttpException` 产生的根源异常，
     *                它承载了引发HTTP通信异常的底层技术问题相关的详细信息，例如是哪种具体的网络异常、数据解析异常等。
     */
    public WeChatHttpException(String message, Throwable cause) {
        super(message, cause);
    }

}