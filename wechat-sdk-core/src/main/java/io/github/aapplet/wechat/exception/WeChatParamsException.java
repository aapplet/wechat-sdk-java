package io.github.aapplet.wechat.exception;

/**
 * <p>
 * `WeChatParamsException`类专门用于表示在微信相关业务操作中，出现参数相关错误的异常情况。
 * 它继承自`WeChatException`，这意味着它是微信业务异常体系里针对参数问题所定义的特定异常类型，
 * 通过继承关系共享了`WeChatException`在异常传播、处理等方面的通用机制，便于在整个项目中对微信业务异常进行统一的分类管理和规范处理。
 * </p>
 * <p>
 * 在微信的各种功能实现场景中，比如调用微信开放平台的接口（如支付接口、用户信息获取接口等）、配置微信相关参数（如公众号配置参数、小程序配置参数等）时，
 * 若传递的参数不符合微信接口要求（参数类型错误、参数缺失、参数取值范围不符合规定等情况）或者配置的参数不符合微信的规范设定，
 * 都可以通过抛出`WeChatParamsException`来向上层代码传达参数异常的相关信息，使得后续代码能够根据具体的异常消息进行相应的处理，
 * 例如提示用户重新输入正确的参数、调整配置文件中的参数内容等操作。
 * </p>
 */
public class WeChatParamsException extends WeChatException {

    /**
     * <p>
     * 此为`WeChatParamsException`类的构造方法，用于创建一个表示参数异常的实例。
     * 它接收一个 `message` 参数，该参数为字符串类型，用于详细描述参数异常的具体情况。
     * </p>
     * <p>
     * 当检测到微信业务操作中存在参数方面的问题时，开发人员需要依据具体的参数错误场景构建合适的异常消息。
     * 例如，若在调用微信支付接口时，缺少了必填的订单金额参数，就可以构建类似“调用微信支付接口时，订单金额参数缺失，请补充完整”这样的消息，
     * 然后将该消息通过这个构造方法传入，创建出`WeChatParamsException`实例并抛出，以便告知调用者具体是哪个参数出现了何种异常情况，
     * 进而帮助调用者采取相应的措施来解决参数异常问题。
     * </p>
     *
     * @param message Exception message，是一个明确描述参数异常详细信息的字符串，
     *                其内容会传达出在微信相关业务操作中是哪个参数出现了错误，以及具体的错误表现形式（如缺失、类型不符等），
     *                方便调用者知晓并针对性地进行参数修正或重新提供等操作。
     */
    public WeChatParamsException(String message) {
        super(message);
    }

    /**
     * <p>
     * 此构造方法用于创建 `WeChatParamsException` 实例，该实例不仅包含了从业务角度描述参数异常情况的消息，
     * 还关联了导致该参数异常发生的根源异常（即引发参数出现问题的底层原因）。`WeChatParamsException` 类主要用于表示在微信相关业务操作中，
     * 出现参数相关错误的异常情况，例如调用微信接口时传递的参数不符合要求，或者配置微信相关参数时出现不符合规范设定等场景下抛出此类异常来传达相应的错误信息。
     * </p>
     * <p>
     * 通过传入 `message` 参数（表示异常消息的字符串）和 `cause` 参数（表示根源异常的 `Throwable` 类型对象），
     * 能够在向上层代码抛出参数异常时，同时提供业务层面清晰的异常描述以及底层具体的引发原因，方便调用者更全面地了解异常产生的根源，
     * 进而可以更精准地进行后续的异常排查和处理操作，例如根据具体情况提示用户重新输入正确的参数、调整配置文件中的参数内容等。
     * </p>
     * <p>
     * 在实际的微信业务场景中，参数异常常常是由一些底层技术问题所引发的。例如，在调用微信支付接口时，需要传递订单金额参数，
     * 若在将用户输入的金额数据转换为接口要求的格式（比如将字符串类型转换为数字类型）过程中出现 `NumberFormatException`（数字格式转换异常），
     * 导致最终传递给微信支付接口的参数不符合要求，此时就可以将业务层面描述参数异常的消息（如“微信支付接口订单金额参数格式错误，请重新输入正确金额”）作为 `message` 参数，
     * 把底层的数字格式转换异常（`NumberFormatException`）作为 `cause` 参数传入此构造方法，创建出 `WeChatParamsException` 实例并抛出。
     * </p>
     * <p>
     * 再比如，在读取微信公众号配置文件中的参数时，若出现 `IOException`（文件读取异常），使得读取到的参数值不完整或者有误，
     * 进而导致后续使用这些参数调用微信接口时出现参数不符合要求的情况，同样可以构建合适的业务异常消息，并把 `IOException` 作为 `cause` 参数传入，
     * 来创建并抛出 `WeChatParamsException`，以便准确传达参数异常及其根源信息。
     * </p>
     *
     * @param message Exception message，是一个从微信业务角度出发，用于详细描述当前参数异常情况的字符串。
     *                它告知调用者是哪项微信业务相关的参数出现了问题，比如是支付接口的参数、公众号配置参数还是其他业务相关的参数有误，
     *                以及具体的错误表现形式（如参数缺失、类型不符、取值范围不对等），方便调用者快速知晓业务层面出现的异常状况，
     *                进而采取相应的应对措施，例如重新输入参数、修正参数值等操作。
     * @param cause   Throwable类型的参数，表示导致当前 `WeChatParamsException` 产生的根源异常，
     *                它承载了引发业务上参数异常的底层技术问题相关的详细信息，例如是哪种具体的数字格式转换异常、文件读取异常等，
     *                使得上层代码在捕获到 `WeChatParamsException` 后，不仅能了解业务层面的参数异常情况，还能通过 `getCause()` 方法获取根源异常，
     *                深入分析是哪个底层环节出了问题，有助于更全面、准确地排查和解决异常情况。
     */
    public WeChatParamsException(String message, Throwable cause) {
        super(message, cause);
    }

}