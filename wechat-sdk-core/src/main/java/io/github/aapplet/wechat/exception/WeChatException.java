package io.github.aapplet.wechat.exception;

/**
 * <p>
 * `WeChatException`类作为微信相关操作异常处理的基础类，继承自 `RuntimeException`，旨在为整个微信业务逻辑层提供统一的异常抛出机制。
 * 由于继承了 `RuntimeException`，在方法中抛出此类异常时，不需要在方法签名里显式声明，使得代码在处理微信相关异常时更加灵活便捷，符合常见的业务逻辑异常处理习惯。
 * </p>
 * <p>
 * 该类适用于各种涉及微信功能的应用场景，例如微信支付、微信公众号开发、微信小程序开发等，只要在这些业务流程中出现不符合预期的情况，都可以通过抛出 `WeChatException` 来向调用者传达错误信息。
 * </p>
 * <p>
 * 这样做有助于将微信相关的异常从底层技术异常（如网络异常、数据解析异常等）抽象为更贴合业务语义的异常，便于上层代码基于业务含义进行针对性的异常处理和错误提示，提升整个微信业务代码的可维护性和可读性。
 * </p>
 */
public class WeChatException extends RuntimeException {

    /**
     * <p>
     * 此为 `WeChatException` 类的基本构造方法，用于创建一个只包含异常消息的异常实例。
     * </p>
     * <p>
     * 在已知具体的微信业务操作出现问题，且能够用一个简洁明了的消息准确描述该问题时，可以使用这个构造方法。
     * 例如，微信接口返回了一个特定的业务错误码，对应着一种明确的业务错误场景（如用户权限不足、请求参数错误等），
     * 开发人员就可以根据这个错误码构建相应的异常消息字符串，然后通过这个构造方法创建 `WeChatException` 实例并抛出，告知调用者具体的业务异常情况。
     * </p>
     *
     * @param message Exception message，是一个用于详细描述异常情况的字符串。
     *                它会传达出在微信相关业务操作中具体是哪方面出现了问题，方便调用者快速了解异常产生的原因，
     *                从而采取相应的措施，比如提示用户进行特定的操作或者进行进一步的错误排查等。
     */
    public WeChatException(String message) {
        super(message);
    }

    /**
     * <p>
     * 这是 `WeChatException` 类的另一个构造方法，它用于创建一个同时包含异常消息和导致该异常的根源异常的异常实例。
     * </p>
     * <p>
     * 在很多实际的微信业务场景中，当前出现的业务异常往往是由一些底层的技术问题引发的。比如在与微信服务器进行网络通信时，
     * 可能会出现网络连接超时（由 `SocketTimeoutException` 表示）或者网络传输过程中出现数据丢失、损坏等情况（可能由 `IOException` 表示），
     * 又或者在解析微信接口返回的数据（假设是 JSON 格式）时出现 JSON 解析错误（由 `JSONException` 表示），这些底层异常最终导致了微信业务操作无法正常完成，
     * 形成了业务层面的异常情况。此时，就可以使用这个构造方法，将业务层面能够描述该异常的消息（通过 `message` 参数传入），
     * 以及导致业务异常的底层根源异常（通过 `cause` 参数传入）一起构建 `WeChatException` 实例并抛出。
     * </p>
     * <p>
     * 这样，当上层代码捕获到 `WeChatException` 时，一方面可以通过获取异常消息了解到业务上出现的问题，
     * 另一方面还可以通过 `getCause()` 方法获取到根源异常，进而深入分析是哪个底层环节出了问题，有助于更全面、准确地排查和解决异常情况。
     * </p>
     *
     * @param message Exception message，是从微信业务角度出发，描述当前业务操作出现异常的相关信息的字符串，
     *                用于告知调用者业务层面出现了何种不符合预期的情况。
     * @param cause   Throwable 类型的参数，表示导致当前 `WeChatException` 产生的根源异常，
     *                它承载了引发业务异常的底层技术问题相关的详细信息，例如是哪种具体的网络异常、数据解析异常等。
     */
    public WeChatException(String message, Throwable cause) {
        super(message, cause);
    }

}