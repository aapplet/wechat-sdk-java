package io.github.aapplet.wechat.exception;

/**
 * <p>
 * `WeChatValidationException`类主要用于表示在微信相关业务操作中，进行数据校验环节出现异常的情况。
 * 它继承自`WeChatException`，这使得它能够融入整个微信业务异常体系中，遵循已有的异常传播和处理规则，方便在项目中对微信业务异常进行统一分类管理与规范处理。
 * </p>
 * <p>
 * 在诸多微信业务场景里，例如验证微信支付请求中的订单信息完整性、检查微信接口调用时传入参数的合法性等操作过程中，
 * 若发现数据不符合预先设定的校验规则（如格式不符、长度不符合要求、必填项缺失等情况），就可以通过抛出`WeChatValidationException`来向上层代码传达校验异常的相关信息，
 * 进而便于后续根据具体的异常消息进行相应处理，像提示用户重新输入正确的数据、记录校验错误日志等操作。
 * </p>
 */
public class WeChatValidationException extends WeChatException {

    /**
     * <p>
     * 此为`WeChatValidationException`类的构造方法，用于创建一个表示校验异常的实例。
     * 它接收一个 `message` 参数，该参数要求是字符串类型，用于详细描述校验异常的具体情况。
     * </p>
     * <p>
     * 当检测到微信业务操作中数据校验方面存在问题时，开发人员需要依据具体的校验出错场景构建合适的异常消息。
     * 例如，在微信支付时校验订单金额，若发现金额格式不正确（如包含非数字字符），就可以构建类似“微信支付订单金额格式错误，请输入正确格式的金额”这样的消息，
     * 然后将该消息通过这个构造方法传入，创建出`WeChatValidationException`实例并抛出，以便告知调用者具体是哪个数据的校验出现了何种异常情况，
     * 从而帮助调用者采取相应的措施来解决校验异常问题。
     * </p>
     *
     * @param message Exception message，是一个明确描述校验异常详细信息的字符串，
     *                其内容会传达出在微信相关业务操作中是哪个数据的校验出现了错误，以及具体的错误表现形式（如格式不对、缺失等），
     *                方便调用者知晓并针对性地进行数据修正或重新提供等操作。
     */
    public WeChatValidationException(String message) {
        super(message);
    }

    /**
     * <p>
     * 此构造方法用于创建 `WeChatValidationException` 实例，该实例会同时包含从业务角度描述数据校验异常情况的消息，
     * 以及导致该数据校验异常发生的根源异常（也就是引发校验出现问题的底层原因）。`WeChatValidationException` 类主要用于在微信相关业务操作中，
     * 表示进行数据校验环节出现异常的情况，例如在验证微信支付请求中的订单信息完整性、检查微信接口调用时传入参数的合法性等校验操作过程中抛出此类异常来传达相应错误信息。
     * </p>
     * <p>
     * 通过传入 `message` 参数（表示异常消息的字符串）和 `cause` 参数（表示根源异常的 `Throwable` 类型对象），
     * 在向上层代码抛出数据校验异常时，能够同时提供业务层面清晰的异常描述以及底层具体的引发原因，方便调用者更全面地了解异常产生的根源，
     * 进而可以更精准地进行后续的异常排查和处理操作，例如根据具体情况提示用户重新输入正确的数据、记录校验错误日志等。
     * </p>
     * <p>
     * 在实际的微信业务场景中，数据校验异常往往是由一些底层技术问题所引发的。例如，在验证微信用户注册信息时，需要校验手机号格式是否正确，
     * 若使用正则表达式进行校验，在解析正则表达式（可能底层依赖的相关库出现问题）时产生 `PatternSyntaxException`（正则表达式语法异常），
     * 进而导致手机号格式校验失败，此时就可以将业务层面描述校验异常的消息（如“微信用户注册时手机号格式校验失败，请重新输入正确手机号”）作为 `message` 参数，
     * 把底层的正则表达式语法异常（`PatternSyntaxException`）作为 `cause` 参数传入此构造方法，创建出 `WeChatValidationException` 实例并抛出。
     * </p>
     * <p>
     * 又如，在验证微信接口调用参数合法性时，需要读取配置文件中的校验规则进行对比，若在读取配置文件过程中出现 `IOException`（文件读取异常），
     * 使得无法获取完整准确的校验规则，最终导致参数校验出现问题，同样可以构建合适的业务异常消息，并把 `IOException` 作为 `cause` 参数传入，
     * 来创建并抛出 `WeChatValidationException`，以便准确传达校验异常及其根源信息，让上层代码知晓整个异常情况并进行相应处理。
     * </p>
     *
     * @param message Exception message，是一个从微信业务角度出发，用于详细描述当前数据校验异常情况的字符串。
     *                它告知调用者是哪项微信业务相关的数据校验出现了问题，比如是用户注册信息校验、接口参数校验还是其他业务相关的数据校验有误，
     *                以及具体的错误表现形式（如格式不对、长度不符合要求、必填项缺失等），方便调用者快速知晓业务层面出现的异常状况，
     *                进而采取相应的应对措施，例如重新输入正确的数据、修正配置文件中的校验规则等操作。
     * @param cause   Throwable类型的参数，表示导致当前 `WeChatValidationException` 产生的根源异常，
     *                它承载了引发业务上数据校验异常的底层技术问题相关的详细信息，例如是哪种具体的正则表达式语法异常、文件读取异常等，
     *                使得上层代码在捕获到 `WeChatValidationException` 后，不仅能了解业务层面的数据校验异常情况，还能通过 `getCause()` 方法获取根源异常，
     *                深入分析是哪个底层环节出了问题，有助于更全面、准确地排查和解决异常情况。
     */
    public WeChatValidationException(String message, Throwable cause) {
        super(message, cause);
    }

}
